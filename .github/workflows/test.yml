# Test Workflow
#
# This workflow runs all tests, code quality checks, security scans,
# and Terraform validation. It's designed to be reusable and is called
# by the build workflow to ensure all checks pass before building.
#
# Jobs included:
# - test: Unit tests with Go/Terraform matrix
# - lint: Code formatting and linting
# - security: Security scanning with gosec
# - terraform: Terraform validation
# - acceptance: Integration tests (conditional)
# - dependency-review: Dependency vulnerability check (PRs only)

name: Tests

on:
  workflow_call:

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GOPRIVATE: github.com/pexip
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.21", "1.24"]
        terraform-version: ["1.0", "1.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Authenticate git for private modules
      run: |
        git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.terraform-version }}
        terraform_wrapper: false
    
    - name: Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Build
      run: go build -v ./...
    
    - name: Run unit tests
      run: |
        go test -race -covermode=atomic -v -tags=unit ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Check for go mod tidy
      run: |
        go mod tidy
        if ! git diff --exit-code go.mod go.sum; then
          echo "go mod tidy resulted in changes"
          exit 1
        fi

#  security:
#    name: Security
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Set up Go
#      uses: actions/setup-go@v4
#      with:
#        go-version: ${{ env.GO_VERSION }}
#
#    - name: Run gosec Security Scanner
#      uses: securego/gosec@master
#      with:
#        args: '-no-fail -fmt sarif -out results.sarif ./...'
#
#    - name: Upload SARIF file
#      uses: github/codeql-action/upload-sarif@v2
#      with:
#        sarif_file: results.sarif

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform fmt
      run: terraform fmt -check -recursive ./example/
    
    - name: Terraform init
      run: terraform init
      working-directory: ./example/
    
    - name: Terraform validate
      run: terraform validate -no-color
      working-directory: ./example/

  # Acceptance tests (only run on main branch or manual trigger)
  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6"
        terraform_wrapper: false
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run acceptance tests
      env:
        TF_ACC: "1"
        PEXIP_ADDRESS: ${{ secrets.PEXIP_ADDRESS }}
        PEXIP_USERNAME: ${{ secrets.PEXIP_USERNAME }}
        PEXIP_PASSWORD: ${{ secrets.PEXIP_PASSWORD }}
      run: |
        echo "Acceptance tests would run here with real Pexip environment"
        go test -v -tags=integration -timeout 30m ./...

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
