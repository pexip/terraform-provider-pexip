name: Tests

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - LICENSE
  pull_request:
    paths-ignore:
      - '**.md'
      - LICENSE
  workflow_call:

permissions: {}

env:
  GO_VERSION: "1.24"
  GOPRIVATE: github.com/pexip

jobs:
  build:
    name: Build local provider
    permissions:
      contents: read

    uses: ./.github/workflows/reusable_build.yml
    with:
      version: "v0.0.1"

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    needs: build
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.24"]
        terraform-version: ["1.12"]

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Authenticate git for private modules
      run: git config --global url."https://${GH_PAT}@github.com/pexip/go-infinity-sdk".insteadOf "https://github.com/pexip/go-infinity-sdk"
      env:
        GH_PAT: ${{ secrets.GH_PAT }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Go cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run unit tests
      run: |
        go test -race -covermode=atomic -v -tags=unit ./...

  terraform:
    name: Terraform Validation
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        terraform-version: ["1.5", "1.6", "1.7"]

    steps:
      - uses: actions/checkout@v5

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.zip_archive_name }}
          path: ./build_artifacts

      - name: Install build_artifact in ./dist
        id: unpack
        shell: bash
        run: |
          mkdir -p dist
          ZIP_FILENAME=$(find ./build_artifacts -type f -name '*.zip' -print -quit)
          mv "$ZIP_FILENAME" ./dist/

      - name: Install local dev override
        run: |
          make install

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform-version }}

      - name: List Terraform plugins
        run: ls -laR ~/.terraform.d/plugins

      - name: Terraform fmt
        run: terraform fmt -check -recursive ./example/

      - name: Terraform init
        run: terraform init
        working-directory: ./example/

      - name: Terraform validate
        run: terraform validate -no-color
        working-directory: ./example/

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: read
      checks: write

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Authenticate git for private modules
      run: git config --global url."https://${GH_PAT}@github.com/pexip/go-infinity-sdk".insteadOf "https://github.com/pexip/go-infinity-sdk"
      env:
        GH_PAT: ${{ secrets.GH_PAT }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Go cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify golangci-lint config
      run: |
        if [ ! -f .golangci.yml ]; then
          echo "Error: .golangci.yml not found"
          exit 1
        fi
        echo "golangci-lint configuration found and valid"

    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
      with:
        version: latest
        args: --timeout=10m --issues-exit-code=1
        only-new-issues: true
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Run: gofmt -s -w ."
          exit 1
        fi
    
    - name: Check for go mod tidy
      run: |
        go mod tidy
        if ! git diff --exit-code go.mod go.sum; then
          echo "go mod tidy resulted in changes. Run 'go mod tidy' locally."
          git diff go.mod go.sum
          exit 1
        fi

    - name: Check for generated files
      run: |
        if command -v terraform-docs &> /dev/null; then
          make docs
          if ! git diff --exit-code; then
            echo "Generated documentation is out of date. Run 'make docs' locally."
            exit 1
          fi
        fi

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request' && github.event.repository.visibility == 'public'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        comment-summary-in-pr: true
