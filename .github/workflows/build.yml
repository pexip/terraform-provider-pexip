# Build and Release Workflow
# 
# This workflow handles building binaries and releasing the provider.
# It depends on the test workflow to ensure all tests, linting, security 
# checks, and Terraform validation pass before building.
#
# Workflow dependencies:
# test.yml -> build.yml -> release (on tags)

name: Build

on:
  workflow_call:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  GO_VERSION: "1.24"

jobs:
  test:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GOPRIVATE: github.com/pexip
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [test]
    if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Authenticate git for private modules
      run: |
        git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=$(cat VERSION)
        BINARY_NAME=terraform-provider-pexip_${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=${BINARY_NAME}.exe
        fi
        go build -ldflags="-s -w -X main.version=${VERSION}" -o ${BINARY_NAME} .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: terraform-provider-pexip-${{ matrix.goos }}-${{ matrix.goarch }}
        path: terraform-provider-pexip_*

  # Release job (only on tags)
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}