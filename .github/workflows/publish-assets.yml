name: Build and Publish Terraform Provider

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Release version (v0.0.0)
        required: true
  workflow_call:
    inputs:
      version:
        type: string
        description: Release version (v0.0.0)
        required: true

permissions: {}

env:
  GO_VERSION: "1.24"
  GOPRIVATE: github.com/pexip
  PROVIDER_NAME: "pexip"

jobs:
  build:
    name: Build Assets
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows

    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Version must be in format v0.0.0 or v0.0.0-suffix (e.g., v1.2.3, v1.2.3-beta.1)"
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ inputs.version }}

      - name: Authenticate git for private modules
        run: git config --global url."https://${GH_PAT}@github.com/pexip/go-infinity-sdk".insteadOf "https://github.com/pexip/go-infinity-sdk"
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set build variables
        id: vars
        run: |
          VERSION="${{ inputs.version }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          BINARY_NAME="terraform-provider-${{env.PROVIDER_NAME}}_v${VERSION}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          echo "binary_name=${BINARY_NAME}" >> $GITHUB_OUTPUT

          ZIP_ARCHIVE_NAME="terraform-provider-${{env.PROVIDER_NAME}}_${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}.zip"
          echo "zip_archive_name=${ZIP_ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GIT_REVISION_DIRTY=$(git diff --quiet || echo '-dirty')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "USER=${{ github.actor }}" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          go build -ldflags "-X main.commit=${GIT_BRANCH}@${GIT_REVISION}${GIT_REVISION_DIRTY} -X internal/version.appBuildTime=${BUILD_TIME} -X internal/version.appVersion=${VERSION} -X internal/version.appBuildUser=${{ github.actor }}" -o "dist/${{ steps.vars.outputs.binary_name }}" .

      - name: Package binary
        run: |
          zip -j "dist/${{ steps.vars.outputs.zip_archive_name }}" "dist/${{ steps.vars.outputs.binary_name }}"

      - name: Upload packaged binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.zip_archive_name }}
          path: "dist/${{ steps.vars.outputs.zip_archive_name }}"
          retention-days: 7

  upload:
    name: Upload Assets
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build_artifacts

      - name: Flatten artifacts into ./dist
        shell: bash
        run: |
          ls -laR build_artifacts
          mkdir -p dist
          for d in build_artifacts/*; do
            mv "$d"/*.zip dist/
          done

      - name: Generate SHA256 checksum
        run: |
          cd dist
          shasum -a 256 *.zip > terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.GPG_PASSPHRASE }}" > passphrase.txt

      - name: Sign checksum file
        run: |
          cd dist
          gpg --batch --yes --pinentry-mode loopback --passphrase-file ../passphrase.txt \
            --armor --output terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS.sig \
            --detach-sign terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS

      - name: Upload SHA256SUMS artifact
        uses: actions/upload-artifact@v4
        with:
          name: "terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS"
          path: "dist/terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS"
          retention-days: 7

      - name: Upload assets to release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 #v2.3.2
        with:
          tag_name: ${{ inputs.version }}
          files: |
            dist/*.zip
            dist/terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS
            dist/terraform-provider-${{env.PROVIDER_NAME}}_${{ needs.build.outputs.version }}_SHA256SUMS.sig
          token: ${{ secrets.GITHUB_TOKEN }}