package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/pexip/go-infinity-sdk/v38/config"
)

var (
	_ resource.ResourceWithImportState = (*InfinityOAuth2ClientResource)(nil)
)

type InfinityOAuth2ClientResource struct {
	InfinityClient InfinityClient
}

type InfinityOAuth2ClientResourceModel struct {
	ID            types.String `tfsdk:"id"`
	ClientID      types.String `tfsdk:"client_id"`
	ClientName    types.String `tfsdk:"client_name"`
	Role          types.String `tfsdk:"role"`
	PrivateKeyJWT types.String `tfsdk:"private_key_jwt"`
}

func (r *InfinityOAuth2ClientResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_infinity_oauth2_client"
}

func (r *InfinityOAuth2ClientResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	p, ok := req.ProviderData.(*PexipProvider)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *PexipProvider, got: %T. Please report this issue to the provider developers", req.ProviderData),
		)
		return
	}

	r.InfinityClient = p.client
}

func (r *InfinityOAuth2ClientResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource URI for the OAuth2 client in Infinity",
			},
			"client_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The OAuth2 client identifier generated by the system",
			},
			"client_name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
					stringvalidator.LengthAtMost(100),
				},
				MarkdownDescription: "The name of the OAuth2 client. Maximum length: 100 characters.",
			},
			"role": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
				MarkdownDescription: "The role URI to assign to this OAuth2 client for authorization.",
			},
			"private_key_jwt": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				MarkdownDescription: "The private key JWT for the OAuth2 client. This field is sensitive and computed.",
			},
		},
		MarkdownDescription: "Manages an OAuth2 client with the Infinity service. OAuth2 clients are used for API access and automation, providing secure authentication for external applications.",
	}
}

func (r *InfinityOAuth2ClientResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	plan := &InfinityOAuth2ClientResourceModel{}

	resp.Diagnostics.Append(req.Plan.Get(ctx, plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	createRequest := &config.OAuth2ClientCreateRequest{
		ClientName: plan.ClientName.ValueString(),
		Role:       plan.Role.ValueString(),
	}

	createResponse, err := r.InfinityClient.Config().CreateOAuth2Client(ctx, createRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Creating Infinity OAuth2 client",
			fmt.Sprintf("Could not create Infinity OAuth2 client: %s", err),
		)
		return
	}

	clientID, err := createResponse.ResourceID()
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Retrieving Infinity OAuth2 client ID",
			fmt.Sprintf("Could not retrieve ID for created Infinity OAuth2 client: %s", err),
		)
		return
	}

	// The OAuth2 client uses a string client_id instead of numeric ID
	clientIDStr := fmt.Sprintf("%d", clientID)

	// Read the state from the API to get all computed values
	model, err := r.read(ctx, clientIDStr)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Reading Created Infinity OAuth2 client",
			fmt.Sprintf("Could not read created Infinity OAuth2 client with ID %s: %s", clientIDStr, err),
		)
		return
	}
	tflog.Trace(ctx, fmt.Sprintf("created Infinity OAuth2 client with ID: %s, name: %s", model.ID, model.ClientName))

	resp.Diagnostics.Append(resp.State.Set(ctx, model)...)
}

func (r *InfinityOAuth2ClientResource) read(ctx context.Context, clientID string) (*InfinityOAuth2ClientResourceModel, error) {
	var data InfinityOAuth2ClientResourceModel

	srv, err := r.InfinityClient.Config().GetOAuth2Client(ctx, clientID)
	if err != nil {
		return nil, err
	}

	if len(srv.ResourceURI) == 0 {
		return nil, fmt.Errorf("OAuth2 client with ID %s not found", clientID)
	}

	data.ID = types.StringValue(srv.ResourceURI)
	data.ClientID = types.StringValue(srv.ClientID)
	data.ClientName = types.StringValue(srv.ClientName)
	data.Role = types.StringValue(srv.Role)

	if srv.PrivateKeyJWT != nil {
		data.PrivateKeyJWT = types.StringValue(*srv.PrivateKeyJWT)
	} else {
		data.PrivateKeyJWT = types.StringNull()
	}

	return &data, nil
}

func (r *InfinityOAuth2ClientResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	state := &InfinityOAuth2ClientResourceModel{}

	resp.Diagnostics.Append(req.State.Get(ctx, state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	clientID := state.ClientID.ValueString()
	state, err := r.read(ctx, clientID)
	if err != nil {
		// Check if the error is a 404 (not found)
		if isNotFoundError(err) {
			resp.State.RemoveResource(ctx)
			return
		}
		resp.Diagnostics.AddError(
			"Error Reading Infinity OAuth2 client",
			fmt.Sprintf("Could not read Infinity OAuth2 client: %s", err),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, state)...)
}

func (r *InfinityOAuth2ClientResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	plan := &InfinityOAuth2ClientResourceModel{}
	state := &InfinityOAuth2ClientResourceModel{}

	resp.Diagnostics.Append(req.Plan.Get(ctx, plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateRequest := &config.OAuth2ClientUpdateRequest{
		ClientName: plan.ClientName.ValueString(),
		Role:       plan.Role.ValueString(),
	}

	clientID := state.ClientID.ValueString()
	_, err := r.InfinityClient.Config().UpdateOAuth2Client(ctx, clientID, updateRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Updating Infinity OAuth2 client",
			fmt.Sprintf("Could not update Infinity OAuth2 client: %s", err),
		)
		return
	}

	// Read the state from the API to get all computed values
	model, err := r.read(ctx, clientID)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Reading Updated Infinity OAuth2 client",
			fmt.Sprintf("Could not read updated Infinity OAuth2 client with ID %s: %s", clientID, err),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, model)...)
}

func (r *InfinityOAuth2ClientResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	state := &InfinityOAuth2ClientResourceModel{}

	tflog.Info(ctx, "Deleting Infinity OAuth2 client")

	resp.Diagnostics.Append(req.State.Get(ctx, state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.InfinityClient.Config().DeleteOAuth2Client(ctx, state.ClientID.ValueString())

	// Ignore 404 Not Found and Lookup errors on delete
	if err != nil && !isNotFoundError(err) && !isLookupError(err) {
		resp.Diagnostics.AddError(
			"Error Deleting Infinity OAuth2 client",
			fmt.Sprintf("Could not delete Infinity OAuth2 client with ID %s: %s", state.ID.ValueString(), err),
		)
		return
	}
}

func (r *InfinityOAuth2ClientResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	clientID := req.ID

	tflog.Trace(ctx, fmt.Sprintf("Importing Infinity OAuth2 client with client ID: %s", clientID))

	// Read the resource from the API
	model, err := r.read(ctx, clientID)
	if err != nil {
		// Check if the error is a 404 (not found)
		if isNotFoundError(err) {
			resp.Diagnostics.AddError(
				"Infinity OAuth2 Client Not Found",
				fmt.Sprintf("Infinity OAuth2 client with client ID %s not found.", clientID),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Error Importing Infinity OAuth2 Client",
			fmt.Sprintf("Could not import Infinity OAuth2 client with client ID %s: %s", clientID, err),
		)
		return
	}

	// Set the state from the imported resource
	resp.Diagnostics.Append(resp.State.Set(ctx, model)...)
}
